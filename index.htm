<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>Enhanced Voting Cards</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f2f2f2;
            padding: 20px;
        }

        .controls {
            margin-bottom: 20px;
        }

        .controls button {
            margin-right: 10px;
            padding: 8px 12px;
            cursor: pointer;
        }

        .card-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .card {
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            width: calc(33% - 50px);
            position: relative;
        }

        .card img {
            width: 100%;
            border-radius: 6px;
        }

        .card h3 {
            margin: 10px 0 5px;
        }

        .card p {
            font-size: 14px;
            color: #555;
        }

        .controls {
            margin-bottom: 30px;
        }

        .vote-buttons button {
            margin-right: 10px;
            padding: 5px 10px;
            cursor: pointer;
        }

        .action-buttons {
            margin-top: 10px;
        }

        .edit-btn {
            background: #f0ad4e;
            color: #fff;
            border: none;
            padding: 6px 10px;
            border-radius: 4px;
            margin-right: 10px;
            cursor: pointer;
        }

        .redirect-btn {
            background: #0275d8;
            color: #fff;
            padding: 6px 10px;
            border-radius: 4px;
            text-decoration: none;
            cursor: pointer;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background: #fff;
            padding: 20px;
            border-radius: 6px;
            width: 90%;
            max-width: 400px;
        }

        .modal-content input,
        .modal-content textarea {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
        }
    </style>
</head>

<body>

    <div class="controls card-container">
        <button onclick="sortCards()">Sort by Votes</button>
        <button onclick="resetCards()">Reset All</button>
    </div>

    <div class="card-container" id="cardContainer"></div>

    <div class="modal" id="editModal">
        <div class="modal-content">
            <h3>Edit Card</h3>
            <input type="text" id="editTitle" placeholder="Title" />
            <textarea id="editDesc" placeholder="Description"></textarea>
            <input type="text" id="editImage" placeholder="Image URL" />
            <input type="text" id="editLabel" placeholder="Button Label" />
            <input type="text" id="editURL" placeholder="Button URL" />
            <button onclick="saveEdit()">Save</button>
            <button onclick="closeModal()">Cancel</button>
        </div>
    </div>

    <script>
        const container = document.getElementById("cardContainer");
        const modal = document.getElementById("editModal");
        let allCards = [];
        let editingIndex = null;
        const localKey = "beastscan_cards";
        let draggedIndex = null;

        async function loadCards() {
            const local = localStorage.getItem(localKey);
            if (local) {
                allCards = JSON.parse(local);
                renderCards();
            } else {
                const res = await fetch("https://my.beastscan.com/test-kit");
                allCards = await res.json();
                saveToLocal();
                renderCards();
            }
        }

        function saveToLocal() {
            localStorage.setItem(localKey, JSON.stringify(allCards));
        }

        function resetCards() {
            localStorage.removeItem(localKey);
            location.reload();
        }

        function sortCards() {
            allCards.sort((a, b) => (b.votes.up - b.votes.down) - (a.votes.up - a.votes.down));
            saveToLocal();
            renderCards();
        }

        function renderCards() {
            container.innerHTML = "";
            allCards.forEach((card, index) => {
                const div = document.createElement("div");
                div.className = "card";
                div.setAttribute("draggable", "true");
                div.setAttribute("data-index", index);
                div.ondragstart = dragStart;
                div.ondragover = dragOver;
                div.ondrop = drop;

                div.innerHTML = `
          <img src="${card.image}" alt="Card Image" />
          <h3>${card.title}</h3>
          <p>${card.description}</p>
          <div class="vote-buttons">
            <button onclick="vote(${index}, 'up')">üëç <span>${card.votes.up}</span></button>
            <button onclick="vote(${index}, 'down')">üëé <span>${card.votes.down}</span></button>
          </div>
          <div class="action-buttons">
            <button class="edit-btn" onclick="openModal(${index})">Edit</button>
            <a class="redirect-btn" href="${card.button.url}" target="_blank">${card.button.label}</a>
          </div>
        `;
                container.appendChild(div);
            });
        }

        function vote(index, type) {
            allCards[index].votes[type]++;
            saveToLocal();
            renderCards();
        }

        function openModal(index) {
            editingIndex = index;
            const card = allCards[index];
            document.getElementById("editTitle").value = card.title;
            document.getElementById("editDesc").value = card.description;
            document.getElementById("editImage").value = card.image;
            document.getElementById("editLabel").value = card.button.label;
            document.getElementById("editURL").value = card.button.url;
            modal.style.display = "flex";
        }

        function closeModal() {
            modal.style.display = "none";
        }

        function saveEdit() {
            const card = allCards[editingIndex];
            card.title = document.getElementById("editTitle").value;
            card.description = document.getElementById("editDesc").value;
            card.image = document.getElementById("editImage").value;
            card.button.label = document.getElementById("editLabel").value;
            card.button.url = document.getElementById("editURL").value;
            saveToLocal();
            renderCards();
            closeModal();
        }

        function dragStart(e) {
            draggedIndex = e.target.getAttribute("data-index");
        }

        function dragOver(e) {
            e.preventDefault();
        }

        function drop(e) {
            const targetIndex = e.target.closest(".card").getAttribute("data-index");
            const draggedCard = allCards.splice(draggedIndex, 1)[0];
            allCards.splice(targetIndex, 0, draggedCard);
            saveToLocal();
            renderCards();
        }

        loadCards();
    </script>
</body>

</html>